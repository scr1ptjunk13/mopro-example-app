{"noir_version":"1.0.0-beta.11+fd3925aaaeb76c76319f44590d135498ef41ea6c","hash":"7064668322265885608","abi":{"parameters":[{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"owner_pubkey","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/62S3QrDIAyF60+3Xe9JEqM13u1VJrPv/wRjjqYg2dVoPzjkKCrxEDNt3Lrc9IuR+pBKsMTYcmhI+IRQKieIqS6MjInTKzBR48i51JKhYKSGayq0woYf3oL/IL3x7e3e5VWvb/Fm8HbwXvx+b+66dF0lB68ysCoDOAa6E/Ocz+sLzPB3p2bAqrU+s/MB7qJMj1ACAAA=","debug_symbols":"nZPLjoMgFIbf5axdcCkgvspkYlCxISFoKEwyMb570UhbF3Thhtvh+/kPHBYYdBfvrXHj9IDmZ4HOG2vNvbVTr4KZXFpd1grytA1e67QEH/FEzcprF6Bx0doK/pSN+6bHrNzeB+VTFFWg3ZD6JDgaq7fRWr1pVEYJEQdMGH3h7MzjMk8ZOfgb5m9enHjy7fxaZgMUkZICLStgzLMFjGt2xYPAPHsQFJUU2BcPQtDsQchiFrysIG/sEJCsvsBjRF63gDi7koNE+SWwJOccftNM9cafqhcQNHUFOLXrJuuN6qw+6nqMrv8o8/A/50j+CLOfej1ErzfRPZaOeQI=","file_map":{"50":{"source":"use poseidon::poseidon2::Poseidon2;\n\nfn main(amount: Field, owner_pubkey: Field, nonce: Field) -> pub Field {\n    // Generate commitment using Poseidon2 hash\n    let inputs = [amount, owner_pubkey, nonce];\n    let commitment = Poseidon2::hash(inputs, 3);\n    commitment\n}\n\n// Function to generate nullifier (for zkETHer)\nfn generate_nullifier(owner_privkey: Field, nonce: Field) -> Field {\n    let inputs = [owner_privkey, nonce];\n    Poseidon2::hash(inputs, 2)\n}\n\n#[test]\nfn test_commitment_generation() {\n    let amount = 100000000000000000; // 0.1 ETH in wei\n    let owner_pubkey = 12345;\n    let nonce = 67890;\n    \n    let commitment = main(amount, owner_pubkey, nonce);\n    \n    // Commitment should be deterministic\n    assert(commitment != 0);\n    \n    // Test same inputs produce same commitment\n    let commitment2 = main(amount, owner_pubkey, nonce);\n    assert(commitment == commitment2);\n}\n\n#[test]\nfn test_nullifier_generation() {\n    let owner_privkey = 54321;\n    let nonce = 67890;\n    \n    let nullifier = generate_nullifier(owner_privkey, nonce);\n    \n    // Nullifier should be deterministic\n    assert(nullifier != 0);\n    \n    // Test same inputs produce same nullifier\n    let nullifier2 = generate_nullifier(owner_privkey, nonce);\n    assert(nullifier == nullifier2);\n    \n    // Different private keys should produce different nullifiers\n    let different_nullifier = generate_nullifier(54322, nonce);\n    assert(nullifier != different_nullifier);\n}\n","path":"/home/junk/Documents/test-mopro/mopro-example-app/poseidon_circuit/src/main.nr"},"57":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/home/junk/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"}},"names":["main"],"brillig_names":[]}